---
import Title from "./Title.astro";

interface Props {
  text: string;
  image: {
    filename: string;
    alt: string;
  };
  ctas?: [
    {
      label: string;
      href: string;
    },
  ];
}

const { text, image, ctas = [] } = Astro.props;
const hasOverlay = text || ctas.length > 0;
---

<div class="relative overflow-hidden">
  <img
    class="w-full max-h-[40vh] md:max-h-[50vh] min-h-48 md:min-h-64 relative object-cover object-top"
    src={image.filename}
    alt={image.alt}
  />
  {
    hasOverlay && (
      <div class="relative md:absolute inset-y-0 right-0 bg-darkblue h-full md:w-1/2">
        <svg
          class="absolute z-0 inset-y-0 left-0 h-full -translate-x-1/2 transform fill-darkblue rotate-180 hidden md:block"
          viewBox="0 0 100 100"
          preserveAspectRatio="none"
          aria-hidden="true"
        >
          <polygon points="0,0 90,0 50,100 0,100" />
        </svg>
        <div class="center px-3 py-8 flex flex-col gap-6 text-center h-full items-center justify-center">
          {text && (
            <Title
              text={text}
              variant="medium"
              element="p"
              class="z-10 text-white"
            />
          )}
          {ctas && (
            <menu class="flex gap-3">
              {ctas.map((cta) => (
                <a
                  class="z-10 inline-flex gap-1.5 rounded-lg text-sm font-semibold py-3 px-4 bg-white text-darkblue transition-colors hover:bg-opacity-95 group"
                  href={cta.href}
                >
                  {cta.label}
                  <span
                    aria-hidden="true"
                    class="hidden opacity-80 sm:inline group-hover:opacity-100"
                  >
                    â†’
                  </span>
                </a>
              ))}
            </menu>
          )}
        </div>
      </div>
    )
  }
</div>
